<?php
class ControllerModuleSupercategoryMenuAdvanced extends Controller { private $error = array(); public $all_links = array(); public function index() { $this->load->language('catalog/category'); $this->load->language('module/supercategorymenuadvanced'); $this->load->model('module/supercategorymenuadvanced'); $this->model_module_supercategorymenuadvanced->createTable('cache_supercategory'); $this->document->setTitle($this->language->get('heading_title')); $this->document->addScript('view/javascript/jquery/jquery-tooltip/jquery.tooltip.min.js'); $this->document->addStyle('view/javascript/jquery/jquery-tooltip/jquery.tooltip.css'); $this->document->addScript('view/javascript/jquery/fancybox/jquery.fancybox-1.3.4.pack.js'); $this->document->addStyle('view/javascript/jquery/fancybox/jquery.fancybox-1.3.4.css'); if (!$this->_is_vqmod_installed() ){ $this->error['warning'] = $this->language->get('error_vqmod'); } $this->data['entry_select_att'] = $this->language->get('entry_select_att'); $this->data['entry_build_cache_att'] = $this->language->get('entry_build_cache_att'); $this->data['entry_delete_cache_att'] = $this->language->get('entry_delete_cache_att'); $this->getList(); } private $BASE_URL = "http://support.ocmodules.com/register/?"; private $GETACCOUNTDETAILS_URL = "http://support.ocmodules.com/getAccountDetails/"; private $GETVERSION_URL = "http://support.ocmodules.com/getCurrentVersion/"; private $EXTENSION=2; private $VERSIONINSTALLED="2.2"; public function settings() { $this->data['current_version']='2.2'; $this->document->addScript('view/javascript/jquery/fancybox/jquery.fancybox-1.3.4.pack.js'); $this->document->addStyle('view/javascript/jquery/fancybox/jquery.fancybox-1.3.4.css'); $this->load->language('module/supercategorymenuadvanced'); $this->document->setTitle($this->language->get('heading_title')); $this->load->model('module/supercategorymenuadvanced'); if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate()) { $this->load->model('setting/store'); $this->model_module_supercategorymenuadvanced->editOneSetting('supercategorymenuadvanced', 'supercategorymenuadvanced_module',$this->request->post); $this->model_module_supercategorymenuadvanced->editAdminSettings('supercategorymenuadvanced', $this->request->post); $this->model_module_supercategorymenuadvanced->editSeoKeyword($this->request->post['supercategorymenuadvanced_seo_keyword']); 
$this->session->data['success'] = $this->language->get('text_success'); 
$this->redirect($this->url->link('module/supercategorymenuadvanced/settings', 'token=' . $this->session->data['token'], 'SSL')); } $this->data['heading_title'] = $this->language->get('heading_title').' Mode - '.$this->config->get('supercategorymenuadvanced_mode'); $this->data['tab_general'] = $this->language->get('tab_general'); $this->data['tab_settings'] = $this->language->get('tab_settings'); $this->data['tab_layouts'] = $this->language->get('tab_layouts'); $this->data['tab_contact'] = $this->language->get('tab_contact'); $this->data['tab_pricerange'] = $this->language->get('tab_pricerange'); $this->data['tab_manufacturer'] = $this->language->get('tab_manufacturer'); $this->data['tab_categories'] = $this->language->get('tab_categories'); $this->data['tab_styles'] = $this->language->get('tab_styles'); $this->data['tab_admincache'] = $this->language->get('tab_admincache'); $this->data['tab_stock'] = $this->language->get('tab_stock'); $this->data['tab_templates'] = $this->language->get('tab_templates'); $this->data['tab_register'] = $this->language->get('tab_register'); $this->data['register_status'] = $this->language->get('register_status'); $this->data['entry_all_values'] = $this->language->get('entry_all_values'); $this->data['entry_list_number'] = $this->language->get('entry_list_number'); $this->data['entry_list_number_explanation'] = $this->language->get('entry_list_number_explanation'); $this->data['entry_pricerange'] = $this->language->get('entry_pricerange'); $this->data['entry_pricerange_explanation'] = $this->language->get('entry_pricerange_explanation'); $this->data['entry_set_vat'] = $this->language->get('entry_set_vat'); $this->data['entry_set_vat_explanation'] = $this->language->get('entry_set_vat_explanation'); $this->data['default_vat_price_range'] = $this->language->get('default_vat_price_range'); $this->data['default_vat_price_range_explanation'] = $this->language->get('default_vat_price_range_explanation'); $this->data['entry_manufacturer'] = $this->language->get('entry_manufacturer'); $this->data['entry_manufacturer_explanation'] = $this->language->get('entry_manufacturer_explanation'); $this->data['entry_asearch_filters'] = $this->language->get('entry_asearch_filters'); $this->data['entry_asearch_filters_explanation'] = $this->language->get('entry_asearch_filters_explanation'); $this->data['entry_menu_filters'] = $this->language->get('entry_menu_filters'); $this->data['entry_menu_filters_explanation'] = $this->language->get('entry_menu_filters_explanation'); $this->data['entry_stock'] = $this->language->get('entry_stock'); $this->data['entry_stock_explanation'] = $this->language->get('entry_stock_explanation'); $this->data['entry_view'] = $this->language->get('entry_view'); $this->data['entry_view_explanation'] = $this->language->get('entry_view_explanation'); $this->data['entry_list'] = $this->language->get('entry_list'); $this->data['entry_select'] = $this->language->get('entry_select'); $this->data['text_yes'] = $this->language->get('text_yes'); $this->data['text_no'] = $this->language->get('text_no'); $this->data['entry_count'] = $this->language->get('entry_count'); $this->data['entry_count_explanation'] = $this->language->get('entry_count_explanation'); $this->data['entry_ocscroll'] = $this->language->get('entry_ocscroll'); $this->data['entry_ocscroll_explanation'] = $this->language->get('entry_ocscroll_explanation'); $this->data['entry_nofollow'] = $this->language->get('entry_nofollow'); $this->data['entry_nofollow_explanation'] = $this->language->get('entry_nofollow_explanation'); $this->data['entry_track_google'] = $this->language->get('entry_track_google'); $this->data['entry_track_google_explanation'] = $this->language->get('entry_track_google_explanation'); $this->data['entry_ajax'] = $this->language->get('entry_ajax'); $this->data['entry_ajax_explanation'] = $this->language->get('entry_ajax_explanation'); $this->data['entry_menu_speed'] = $this->language->get('entry_menu_speed'); $this->data['entry_asearch_speed'] = $this->language->get('entry_asearch_speed'); $this->data['entry_menu_speed_explanation'] = $this->language->get('entry_menu_speed_explanation'); $this->data['entry_asearch_speed_explanation'] = $this->language->get('entry_asearch_speed_explanation'); $this->data['entry_order'] = $this->language->get('entry_order'); $this->data['entry_order_explanation'] = $this->language->get('entry_order_explanation'); $this->data['text_enabled'] = $this->language->get('text_enabled'); $this->data['text_disabled'] = $this->language->get('text_disabled'); $this->data['text_content_top'] = $this->language->get('text_content_top'); $this->data['text_content_bottom'] = $this->language->get('text_content_bottom'); $this->data['text_column_left'] = $this->language->get('text_column_left'); $this->data['text_column_right'] = $this->language->get('text_column_right'); $this->data['entry_category'] = $this->language->get('entry_category'); $this->data['entry_category_asearch'] = $this->language->get('entry_category_asearch'); $this->data['entry_category_explanation'] = $this->language->get('entry_category_explanation'); $this->data['entry_asearch_explanation'] = $this->language->get('entry_asearch_explanation'); $this->data['entry_layout'] = $this->language->get('entry_layout'); $this->data['entry_position'] = $this->language->get('entry_position'); $this->data['entry_status'] = $this->language->get('entry_status'); $this->data['entry_sort_order'] = $this->language->get('entry_sort_order'); $this->data['entry_value'] = $this->language->get('entry_value'); $this->data['entry_separator'] = $this->language->get('entry_separator'); $this->data['entry_examples'] = $this->language->get('entry_examples'); $this->data['entry_separator_explanation'] = $this->language->get('entry_separator_explanation'); $this->data['entry_values_explanation'] = $this->language->get('entry_values_explanation'); $this->data['text_none'] = $this->language->get('text_none'); $this->data['button_save'] = $this->language->get('button_save'); $this->data['button_cancel'] = $this->language->get('button_cancel'); $this->data['button_add_module'] = $this->language->get('button_add_module'); $this->data['button_remove'] = $this->language->get('button_remove'); $this->data['button_settings'] = $this->language->get('button_settings'); $this->data['text_count'] = $this->language->get('text_count'); $this->data['text_human'] = $this->language->get('text_human'); $this->data['entry_steps_text'] = $this->language->get('entry_steps_text'); $this->data['entry_steps'] = $this->language->get('entry_steps'); $this->data['entry_reorder'] = $this->language->get('entry_reorder'); $this->data['entry_steps_explanation'] = $this->language->get('entry_steps_explanation'); $this->data['entry_reorder_explanation'] = $this->language->get('entry_reorder_explanation'); $this->data['entry_style'] = $this->language->get('entry_style'); $this->data['entry_style_explanation'] = $this->language->get('entry_style_explanation'); $this->data['entry_template'] = $this->language->get('entry_template'); $this->data['text_production'] = $this->language->get('text_production'); $this->data['text_developing'] = $this->language->get('text_developing'); $this->data['entry_mode'] = $this->language->get('entry_mode'); $this->data['entry_mode_explanation'] = $this->language->get('entry_mode_explanation'); $this->data['entry_trigger_see_more'] = $this->language->get('entry_trigger_see_more'); $this->data['entry_see_more_trigger_explanation'] = $this->language->get('entry_see_more_trigger_explanation'); $this->data['entry_open'] = $this->language->get('entry_open'); $this->data['entry_search'] = $this->language->get('entry_search'); $this->data['text_open'] = $this->language->get('text_open'); $this->data['text_close'] = $this->language->get('text_close'); $this->data['entry_open_explanation'] = $this->language->get('entry_open_explanation'); $this->data['entry_search_explanation'] = $this->language->get('entry_search_explanation'); $this->data['entry_recalcular'] = $this->language->get('entry_recalcular'); $this->data['entry_recalcular_explanation'] = $this->language->get('entry_recalcular_explanation'); $this->data['button_truncate'] = $this->language->get('button_truncate'); $this->data['entry_truncate_explanation'] = $this->language->get('entry_truncate_explanation'); $this->data['entry_truncate'] = $this->language->get('entry_truncate'); $this->data['text_records'] = $this->language->get('text_records'); $this->data['entry_special'] = $this->language->get('entry_special'); $this->data['entry_arrivals'] = $this->language->get('entry_arrivals'); $this->data['entry_number_day'] = $this->language->get('entry_number_day'); $this->data['entry_clearance'] = $this->language->get('entry_clearance'); $this->data['entry_auto_clean'] = $this->language->get('entry_auto_clean'); $this->data['entry_select_clearance'] = $this->language->get('entry_select_clearance'); $this->data['entry_arrivals_explanation'] = $this->language->get('entry_arrivals_explanation'); $this->data['entry_clearance_explanation'] = $this->language->get('entry_clearance_explanation'); $this->data['entry_special_explanation'] = $this->language->get('entry_special_explanation'); $this->data['entry_auto_clean_explanation'] = $this->language->get('entry_auto_clean_explanation'); $this->data['entry_slider'] = $this->language->get('entry_slider'); $this->data['text_horizontal'] = $this->language->get('text_horizontal'); $this->data['entry_seo_keyword'] = $this->language->get('entry_seo_keyword'); $this->data['entry_seo_keyword_explanation'] = $this->language->get('entry_seo_keyword_explanation'); $this->data['opencart'] = $this->language->get('opencart'); $this->data['rg']=false; if (isset($this->error['warning'])) { $this->data['error_warning'] = $this->error['warning']; } else { $this->data['error_warning'] = ''; } $this->data['breadcrumbs'] = array(); $this->data['breadcrumbs'][] = array( 'text' => $this->language->get('text_home'), 'href' => $this->url->link('common/home', 'token=' . $this->session->data['token'], 'SSL'), 'separator' => false ); $this->data['breadcrumbs'][] = array( 'text' => $this->language->get('text_module'), 'href' => $this->url->link('extension/module', 'token=' . $this->session->data['token'], 'SSL'), 'separator' => ' :: ' ); $this->data['breadcrumbs'][] = array( 'text' => $this->language->get('heading_title'), 'href' => $this->url->link('module/supercategorymenuadvanced', 'token=' . $this->session->data['token'], 'SSL'), 'separator' => ' :: ' ); $this->data['breadcrumbs'][] = array( 'text' => $this->language->get('heading_title2'), 'href' => $this->url->link('module/supercategorymenuadvanced/settings', 'token=' . $this->session->data['token'], 'SSL'), 'separator' => ' :: ' ); $this->data['action'] = $this->url->link('module/supercategorymenuadvanced/settings', 'token=' . $this->session->data['token'], 'SSL'); $this->data['cancel'] = $this->url->link('module/supercategorymenuadvanced', 'token=' . $this->session->data['token'], 'SSL'); $this->data['settings_btn'] = $this->url->link('module/supercategorymenuadvanced/settings', 'token=' . $this->session->data['token'], 'SSL'); $this->data['modules'] = array(); if (isset($this->request->post['supercategorymenuadvanced_module'])) { $this->data['modules'] = $this->request->post['supercategorymenuadvanced_module']; } elseif ($this->config->get('supercategorymenuadvanced_module')) { $this->data['modules'] = $this->config->get('supercategorymenuadvanced_module'); } $this->data['settings'] = array(); if (isset($this->request->post['supercategorymenuadvanced_settings'])) { $this->data['settings'] = $this->request->post['supercategorymenuadvanced_settings']; } elseif ($this->config->get('supercategorymenuadvanced_settings')) { $this->data['settings'] = $this->config->get('supercategorymenuadvanced_settings'); } $this->data['number_registros']=$this->model_module_supercategorymenuadvanced->getCacheCount(); if (isset($this->request->post['supercategorymenuadvanced_mode'])){ $this->data['settings_mode']=$this->request->post['supercategorymenuadvanced_mode']; }elseif ($this->config->get('supercategorymenuadvanced_mode')) { $this->data['settings_mode'] = $this->config->get('supercategorymenuadvanced_mode'); }else{ $this->data['settings_mode']="production"; } if (isset($this->request->post['supercategorymenuadvanced_seo_keyword'])){ $this->data['settings_seo_keyword']=$this->request->post['supercategorymenuadvanced_seo_keyword']; }elseif ($this->model_module_supercategorymenuadvanced->getSeoWord()) { $this->data['settings_seo_keyword'] = $this->model_module_supercategorymenuadvanced->getSeoWord(); }else{ $this->data['settings_seo_keyword']="Store"; } if (isset($this->data['settings']['track_google'])){ $this->data['settings_trackgoogle']=$this->data['settings']['track_google']; }else{ $this->data['settings_trackgoogle']=0; } $this->data['google_code']=$this->config->get('config_google_analytics'); if (isset($this->data['settings']['nofollow'])){ $this->data['settings_nofollow']=$this->data['settings']['nofollow']; }else{ $this->data['settings_nofollow']=0; } if (isset($this->data['settings']['ajax']['ajax'])){ $this->data['settings_ajax']=$this->data['settings']['ajax']['ajax']; }else{ $this->data['settings_ajax']=0; } if (isset($this->data['settings']['ajax']['speedmenu'])){ $this->data['settings_ajax_speedmenu']=$this->data['settings']['ajax']['speedmenu']; }else{ $this->data['settings_ajax_speedmenu']=2000; } if (isset($this->data['settings']['ajax']['speedresults'])){ $this->data['settings_ajax_speedresults']=$this->data['settings']['ajax']['speedresults']; }else{ $this->data['settings_ajax_speedresults']=2000; } if (isset($this->data['settings']['see_more_trigger'])){ $this->data['settings_see_more_trigger']=$this->data['settings']['see_more_trigger']; }else{ $this->data['settings_see_more_trigger']=0; } if (isset($this->data['settings']['asearch_filters'])){ $this->data['settings_asearch_filters']=$this->data['settings']['asearch_filters']; }else{ $this->data['settings_asearch_filters']=0; } if (isset($this->data['settings']['menu_filters'])){ $this->data['settings_menu_filters']=$this->data['settings']['menu_filters']; }else{ $this->data['settings_menu_filters']=1; } if (isset($this->data['settings']['order'])){ $this->data['settings_order']=$this->data['settings']['order']; }else{ $this->data['settings_order']="OH"; } if (isset($this->data['settings']['ocscroll'])){ $this->data['settings_ocscroll']=$this->data['settings']['ocscroll']; }else{ $this->data['settings_ocscroll']=0; } $this->load->model('setting/extension'); if(in_array("ocscroll",$this->model_setting_extension->getInstalled('module'))){ $this->data['ocscroll']=true; }else{ $this->data['ocscroll']=false; } if (isset($this->data['settings']['countp'])){ $this->data['settings_countp']=$this->data['settings']['countp']; }else{ $this->data['settings_countp']=0; } if (isset($this->data['settings']['manufacturer']['manufacturer'])){ $this->data['settings_manufacturer']=$this->data['settings']['manufacturer']['manufacturer']; }else{ $this->data['settings_manufacturer']=0; } if (isset($this->data['settings']['manufacturer']['order'])){ $this->data['settings_manufacturer_order']=$this->data['settings']['manufacturer']['order']; }else{ $this->data['settings_manufacturer_order']=0; } if (isset($this->data['settings']['manufacturer']['list_number'])){ $this->data['settings_manufacturer_list_number']=$this->data['settings']['manufacturer']['list_number']; }else{ $this->data['settings_manufacturer_list_number']=10; } if (isset($this->data['settings']['manufacturer']['view'])){ $this->data['settings_manufacturer_view']=$this->data['settings']['manufacturer']['view']; }else{ $this->data['settings_manufacturer_view']='list'; } if (isset($this->data['settings']['manufacturer']['initval'])){ $this->data['settings_manufacturer_initval']=$this->data['settings']['manufacturer']['initval']; }else{ $this->data['settings_manufacturer_initval']='opened'; } if (isset($this->data['settings']['manufacturer']['searchinput'])){ $this->data['settings_manufacturer_searchinput']=$this->data['settings']['manufacturer']['searchinput']; }else{ $this->data['settings_manufacturer_searchinput']='no'; } if (isset($this->data['settings']['category']['category'])){ $this->data['settings_category']=$this->data['settings']['category']['category']; }else{ $this->data['settings_category']=0; } if (isset($this->data['settings']['category']['order'])){ $this->data['settings_category_order']=$this->data['settings']['category']['order']; }else{ $this->data['settings_category_order']=0; } if (isset($this->data['settings']['category']['list_number'])){ $this->data['settings_category_list_number']=$this->data['settings']['category']['list_number']; }else{ $this->data['settings_category_list_number']=10; } if (isset($this->data['settings']['category']['asearch'])){ $this->data['settings_category_asearch']=$this->data['settings']['category']['asearch']; }else{ $this->data['settings_category_asearch']=0; } if (isset($this->data['settings']['category']['view'])){ $this->data['settings_category_view']=$this->data['settings']['category']['view']; }else{ $this->data['settings_category_view']='list'; } if (isset($this->data['settings']['category']['style'])){ $this->data['settings_category_style']=$this->data['settings']['category']['style']; }else{ $this->data['settings_category_style']='imagen1'; } if (isset($this->data['settings']['category']['initval'])){ $this->data['settings_category_initval']=$this->data['settings']['category']['initval']; }else{ $this->data['settings_category_initval']='opened'; } if (isset($this->data['settings']['stock']['stock'])){ $this->data['settings_stock']=$this->data['settings']['stock']['stock']; }else{ $this->data['settings_stock']=0; } if (isset($this->data['settings']['stock']['view'])){ $this->data['settings_stock_view']=$this->data['settings']['stock']['view']; }else{ $this->data['settings_stock_view']='list'; } if (isset($this->data['settings']['stock']['recalcular'])){ $this->data['settings_recalcular']=$this->data['settings']['stock']['recalcular']; }else{ $this->data['settings_recalcular']=0; } if (isset($this->data['settings']['stock']['special'])){ $this->data['settings_special']=$this->data['settings']['stock']['special']; }else{ $this->data['settings_special']=0; } if (isset($this->data['settings']['stock']['arrivals'])){ $this->data['settings_arrivals']=$this->data['settings']['stock']['arrivals']; }else{ $this->data['settings_arrivals']=0; } if (isset($this->data['settings']['stock']['number_day'])){ $this->data['settings_number_day']=$this->data['settings']['stock']['number_day']; }else{ $this->data['settings_number_day']=7; } if (isset($this->data['settings']['stock']['clearance'])){ $this->data['settings_clearance']=$this->data['settings']['stock']['clearance']; }else{ $this->data['settings_clearance']=0; } if (isset($this->data['settings']['stock']['tipo'])){ $this->data['settings_stock_tipo']=$this->data['settings']['stock']['tipo']; }else{ $this->data['settings_stock_tipo']='list'; } if (isset($this->data['settings']['stock']['initval'])){ $this->data['settings_stock_initval']=$this->data['settings']['stock']['initval']; }else{ $this->data['settings_stock_initval']='opened'; } $this->load->model('localisation/stock_status'); $this->data['stock_statuses'] = $this->model_localisation_stock_status->getStockStatuses(); if (isset($this->data['settings']['stock']['clearance_value'])) { $this->data['settings_clearance_value'] = $this->data['settings']['stock']['clearance_value']; } else { $this->data['settings_clearance_value'] = $this->language->get('entry_select'); } if (isset($this->data['settings']['stock']['auto_clean'])) { $this->data['settings_auto_clean'] = $this->data['settings']['stock']['auto_clean']; } else { $this->data['settings_auto_clean'] = 0; } if (isset($this->request->post['supercategorymenuadvanced_code'])){ $this->data['settings_code']=$this->request->post['supercategorymenuadvanced_code']; }elseif ($this->config->get('supercategorymenuadvanced_code')) { $this->data['settings_code'] = $this->config->get('supercategorymenuadvanced_code'); }else{ $this->data['settings_code']="u"; } if ($this->data['settings_code']=="u"){ $this->data['supercategorymenuadvanced_accountDetails'] = "Extension not registered, please register to get support. <a class=\"register\" href=\"".$this->BASE_URL."&extension=".urlencode($this->EXTENSION)."&domain=".urlencode($_SERVER['SERVER_NAME'])."\"> Register</a>"; $this->error['warning'] = "Extension not registered, please register to get support."; }else{ $accountDetails = $this->get_accountDetails($this->config->get('supercategorymenuadvanced_code')); if(!isset($accountDetails) || ($accountDetails->error)){ $this->all_links = false; }else{ $this->all_links = true; } if ($this->all_links) { $this->data['supercategorymenuadvanced_accountDetails'] = "Thanks for register this extension, {$accountDetails->extension} for {$accountDetails->domain} , now you have full support on support.ocmodules.com"; $this->data['rg']=true; if(!$accountDetails->approved){ $this->error['warning'] = "Extension registered, waiting to be approved."; } }else{ $this->data['supercategorymenuadvanced_accountDetails'] = "Extension not registered, please register to get support. <a class=\"register\" href=\"".$this->BASE_URL."&extension=".urlencode($this->EXTENSION)."&domain=".urlencode($_SERVER['SERVER_NAME'])."\"> Register</a>"; $this->error['warning'] = "Extension not registered, please register to get support."; } } if (isset($this->data['settings']['styles'])){ $this->data['settings_styles']=$this->data['settings']['styles']; }else{ $this->data['settings_styles']="default"; } $this->data['styles'] = array(); $directories = glob(DIR_CATALOG . 'view/javascript/jquery/supermenu/templates/*', GLOB_ONLYDIR); foreach ($directories as $directory) { $this->data['styles'][] = basename($directory); } if (isset($this->data['settings']['template_menu'])){ $this->data['settings_template']=$this->data['settings']['template_menu']; }else{ $this->data['settings_template']="supercategorymenu.tpl"; } $directories = glob( DIR_CATALOG .'/view/theme/'. $this->config->get('config_template') . '/template/module/supercategorymenu/templates/*V2.tpl'); $this->data['templates'] = array(); $this->data['url_templates']=HTTP_CATALOG .'catalog/view/theme/'. $this->config->get('config_template') . '/template/module/supercategorymenu/templates/'; foreach ($directories as $directory) { $this->data['templates'][] = basename($directory); } if (isset($this->data['settings']['pricerange']['pricerange'])){ $this->data['settings_pricerange']=$this->data['settings']['pricerange']['pricerange']; }else{ $this->data['settings_pricerange']=0; } if (isset($this->data['settings']['pricerange']['view'])){ $this->data['settings_price_view']=$this->data['settings']['pricerange']['view']; }else{ $this->data['settings_price_view']="slider"; } if (isset($this->data['settings']['pricerange']['steps'])){ $this->data['settings_pricerange_steps']=$this->data['settings']['pricerange']['steps']; }else{ $this->data['settings_pricerange_steps']=array('10000','1000','100','10','1'); } if (isset($this->data['settings']['pricerange']['reorder'])){ $this->data['settings_pricerange_reorder']=$this->data['settings']['pricerange']['reorder']; }else{ $this->data['settings_pricerange_reorder']=0; } if (isset($this->data['settings']['pricerange']['setvat'])){ $this->data['settings_setvat']=$this->data['settings']['pricerange']['setvat']; }else{ $this->data['settings_setvat']=0; } if (isset($this->data['settings']['pricerange']['tax_class_id'])){ $this->data['tax_class_id']=$this->data['settings']['pricerange']['tax_class_id']; }else{ $this->data['tax_class_id']=""; } $this->load->model('localisation/tax_class'); $this->data['tax_classes'] = $this->model_localisation_tax_class->getTaxClasses(); if (isset($this->data['settings']['pricerange']['initval'])){ $this->data['settings_pricerange_initval']=$this->data['settings']['pricerange']['initval']; }else{ $this->data['settings_pricerange_initval']='opened'; } $this->data['version']=array(); $extensionDetails = $this->get_currentVersion(); if(isset($extensionDetails) && (!$extensionDetails->error)){ $this->data['version']['name']=$extensionDetails->extension_name; $this->data['version']['extension_opencart_url']=$extensionDetails->extension_opencart_url; $this->data['version']['current_version']=$extensionDetails->extension_current_version; $this->data['version']['whats_new']=$extensionDetails->extension_last_update; foreach($extensionDetails->other_modules as $other_modules){ $this->data['version']['modules'][]=array( 'name' =>$other_modules->extension_name, 'version' =>$other_modules->extension_current_version, 'extension_opencart_url' =>$other_modules->extension_opencart_url, 'resume' =>$other_modules->extension_description, 'video' =>$other_modules->extension_video, ); } } $this->data['token'] = $this->session->data['token']; $category_id="Error"; $are_you_sure=0; $this->data['error_warning']=0; $this->data['success']=0; $this->data['button_delete'] = $this->language->get('button_delete'); $this->data['button_cancel'] = $this->language->get('button_cancel'); $this->data['text_cache_del_remenber_setting'] = $this->language->get('text_cache_del_remenber_setting'); $this->data['text_error_no_cache'] = false; $this->data['entry_cache_del_list'] = sprintf($this->language->get('entry_cache_del_list'),"ADMIN"); $this->data['successdel'] = $this->language->get('success_del_cache'); $this->data['cache_records'] = $this->model_module_supercategorymenuadvanced->GetCacheRecords('admin','cs.name'); $this->data['action_del_cache_admin'] = $this->url->link('module/supercategorymenuadvanced/DeleteCacheSettings', 'token=' . $this->session->data['token'] .'&category_id=admin&Are_you_sure=1', 'SSL'); if (empty($this->data['cache_records'])){ $this->data['text_error_no_cache'] = $this->language->get('text_error_no_cache'); } if (isset($this->error['warning'])) { $this->data['error_warning'] = $this->error['warning']; }else { $this->data['error_warning'] = ''; } $this->load->model('localisation/language'); $this->data['languages'] = $this->model_localisation_language->getLanguages(); $this->load->model('design/layout'); $this->data['layouts'] = $this->model_design_layout->getLayouts(); $this->template = 'module/supercategorymenu/supercategorymenuadvanced_settings.tpl'; $this->children = array( 'common/header', 'common/footer' ); $this->response->setOutput($this->render()); } private function do_post_request($url, $_data, $optional_headers = null) { $data = array(); while(list($n,$v) = each($_data)){ $data[] = urlencode($n)."=".urlencode($v); } $data = implode('&', $data); $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_POST, true); curl_setopt($ch, CURLOPT_REFERER,$_SERVER['SERVER_NAME']); curl_setopt($ch, CURLOPT_POSTFIELDS, $data); curl_setopt($ch, CURLOPT_HEADER, false); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); $response = curl_exec($ch); curl_close($ch); return $response; } public function _is_vqmod_installed() { if(class_exists('VQMod')) { return true; }else{ return false; } } private function getList() { $this->load->language('module/supercategorymenuadvanced'); $this->data['breadcrumbs'] = array(); $this->data['breadcrumbs'][] = array( 'text' => $this->language->get('text_home'), 'href' => $this->url->link('common/home', 'token=' . $this->session->data['token'], 'SSL'), 'separator' => false ); $this->data['breadcrumbs'][] = array( 'text' => $this->language->get('text_module'), 'href' => $this->url->link('extension/module', 'token=' . $this->session->data['token'], 'SSL'), 'separator' => ' :: ' ); $this->data['breadcrumbs'][] = array( 'text' => $this->language->get('heading_title'), 'href' => $this->url->link('module/supercategorymenuadvanced', 'token=' . $this->session->data['token'], 'SSL'), 'separator' => ' :: ' ); $this->data['action'] = $this->url->link('module/supercategorymenuadvanced', 'token=' . $this->session->data['token'], 'SSL'); $this->data['cancel'] = $this->url->link('extension/module', 'token=' . $this->session->data['token'], 'SSL'); $this->data['settings_btn'] = $this->url->link('module/supercategorymenuadvanced/settings', 'token=' . $this->session->data['token'], 'SSL'); $this->data['button_save'] = $this->language->get('button_save'); $this->data['button_exit'] = $this->language->get('button_exit'); $this->data['button_settings'] = $this->language->get('button_settings'); $this->load->model('setting/store'); $this->data['stores']=array(array('name' => "default store",'store_id' => 0)); $store_id=0; $results = $this->model_setting_store->getStores(); foreach ($results as $result) { $store_id.=",".$result['store_id']; $this->data['stores'][$result['store_id']] = array( 'store_id' => $result['store_id'], 'name' => $result['name'], ); } $stores=explode(",",$store_id); foreach ($stores as $store){ $this->data['categories']['str'.$store] = array(); $this->load->model('module/supercategorymenuadvanced'); $subcategories[] = array( 'category_id' => 0, 'name' => $this->language->get('category_home'), 'parent_id' => 0, 'href' => $this->url->link('module/supercategorymenuadvanced/GetAllValues', 'token=' . $this->session->data['token'] . '&category_id=0&store_id='.$store.'', 'SSL') ); $this->data['categories']['str'.$store][] = array( 'category_id' => 0, 'name' => $this->language->get('category_home'), 'subcategories' =>$subcategories ); $results = $this->model_module_supercategorymenuadvanced->getCategoriesParent_id(0, $store); $subcategories = array(); foreach ($results as $result) { $subcategories[] = array( 'category_id' => $result['category_id'], 'name' => $result['name'], 'parent_id' => $result['parent_id'], 'href' => $this->url->link('module/supercategorymenuadvanced/GetAllValues', 'token=' . $this->session->data['token'] . '&category_id=' . $result['category_id'] .'&store_id='.$store, 'SSL') ); $list_of_subcat = array(); $list_of_subcats=$this->model_module_supercategorymenuadvanced->getCategories($result['category_id'], $store); foreach ($list_of_subcats as $list_of_subcat) { $subcategories[] = array( 'category_id' => $list_of_subcat['category_id'], 'name' => $list_of_subcat['name'], 'parent_id' => $list_of_subcat['parent_id'], 'href' => $this->url->link('module/supercategorymenuadvanced/GetAllValues', 'token=' . $this->session->data['token'] . '&category_id=' . $list_of_subcat['category_id'] .'&store_id='.$store, 'SSL') ); } if ($result['parent_id']==0){ $this->data['categories']['str'.$store][] = array( 'category_id' => $result['category_id'], 'name' => $result['name'], 'subcategories' => $subcategories ); $subcategories = array(); } } } $this->data['heading_title'] = $this->language->get('heading_title').' Mode - '.$this->config->get('supercategorymenuadvanced_mode'); $this->data['text_no_results'] = $this->language->get('text_no_results'); $this->data['column_name'] = $this->language->get('column_name'); $this->data['column_sort_order'] = $this->language->get('column_sort_order'); $this->data['column_action'] = $this->language->get('column_action'); $this->data['button_insert'] = $this->language->get('button_insert'); $this->data['button_delete'] = $this->language->get('button_delete'); if (isset($this->error['warning'])) { $this->data['error_warning'] = $this->error['warning']; } else { $this->data['error_warning'] = ''; } if (isset($this->session->data['success'])) { $this->data['success'] = $this->session->data['success']; unset($this->session->data['success']); } else { $this->data['success'] = ''; } $this->template = 'module/supercategorymenu/supercategorymenuadvanced.tpl'; $this->children = array( 'common/header', 'common/footer' ); $this->response->setOutput($this->render()); } public function SetAllValues() { $this->load->model('module/supercategorymenuadvanced'); if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate()) { $this->model_module_supercategorymenuadvanced->editOneSetting('supercategorymenuadvanced', $this->request->post['dnd'],$this->request->post,$this->request->post['store_id']); $this->model_module_supercategorymenuadvanced->DeleteCacheValues($this->request->post['category_id'],$this->request->post['store_id']); } } private function get_accountDetails($salt) { $detailurl = $this->GETACCOUNTDETAILS_URL; return json_decode($this->do_post_request($detailurl, array("salt" => $salt,"server"=>$_SERVER['SERVER_NAME'], "extension"=>$this->EXTENSION))); } private function get_currentVersion() { $detailurl = $this->GETVERSION_URL; return json_decode($this->do_post_request($detailurl, array("version_installed" => $this->VERSIONINSTALLED,"extension"=>$this->EXTENSION))); } public function SetAllValuesCategories() { $this->load->model('module/supercategorymenuadvanced'); if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate()) { $this->model_module_supercategorymenuadvanced->editOneSetting('supercategorymenuadvanced', $this->request->post['dnd'],$this->request->post); $this->model_module_supercategorymenuadvanced->DeleteCacheValues($this->request->post['category_id'],$this->request->post['store_id']); $subcategories=$this->model_module_supercategorymenuadvanced->getCategoriesParent_id($this->request->post['category_id'],$this->request->post['store_id']); foreach ($subcategories as $subcategory){ $valores=array(); $valores = array( "VALORES_".$subcategory['category_id'] => $this->request->post['VALORES_'.$this->request->post['category_id'].''], ); $this->model_module_supercategorymenuadvanced->editOneSetting('supercategorymenuadvanced', "VALORES_".$subcategory['category_id'],$valores,$this->request->post['store_id']); $this->model_module_supercategorymenuadvanced->DeleteCacheValues($subcategory['category_id'],$this->request->post['store_id']); } } } public function GetAllValues(){ if (isset($this->request->get['category_id'])) { $category_id = $this->request->get['category_id']; } else { $category_id = 'error'; } if (isset($this->request->get['store_id'])) { $store_id = $this->request->get['store_id']; } else { $store_id = 'error'; } $this->data['action_save_attribute'] = $this->url->link('module/supercategorymenuadvanced/SetAllValues', 'token=' . $this->session->data['token'], 'SSL'); $this->load->language('module/supercategorymenuadvanced'); $this->data['entry_all_values'] = $this->language->get('entry_all_values'); $this->data['entry_value'] = $this->language->get('entry_value'); $this->data['entry_separator'] = $this->language->get('entry_separator'); $this->data['entry_examples'] = $this->language->get('entry_examples'); $this->data['entry_separator_explanation'] = $this->language->get('entry_separator_explanation'); $this->data['entry_order'] = $this->language->get('entry_order'); $this->data['entry_values_explanation'] = $this->language->get('entry_values_explanation'); $this->data['text_none'] = $this->language->get('text_none'); $this->data['button_save'] = $this->language->get('button_save'); $this->data['button_close'] = $this->language->get('button_close'); $this->data['text_count'] = $this->language->get('text_count'); $this->data['text_human'] = $this->language->get('text_human'); $this->data['text_computer'] = $this->language->get('text_computer'); $this->data['entry_sort_order'] = $this->language->get('entry_sort_order'); $this->data['entry_num_products'] = $this->language->get('entry_num_products'); $this->data['entry_list'] = $this->language->get('entry_list'); $this->data['entry_select'] = $this->language->get('entry_select'); $this->data['entry_view'] = $this->language->get('entry_view2'); $this->data['entry_image'] = $this->language->get('entry_image'); $this->data['text_what_is'] = $this->language->get('text_what_is'); $this->data['entry_open'] = $this->language->get('entry_open'); $this->data['entry_search'] = $this->language->get('entry_search'); $this->data['text_yes'] = $this->language->get('text_yes'); $this->data['text_no'] = $this->language->get('text_no'); $this->data['text_open'] = $this->language->get('text_open'); $this->data['text_close'] = $this->language->get('text_close'); $this->data['no_values'] = $this->language->get('no_values'); $this->data['button_save_all'] = $this->language->get('button_save_all'); $this->data['opencart'] = $this->language->get('opencart'); $this->load->model('module/supercategorymenuadvanced'); if ((int)$category_id==0){ $this->data['success'] =sprintf($this->language->get('success_set'), $this->language->get('category_home')); }else{ $category_path = $this->model_module_supercategorymenuadvanced->getPath((int)$category_id); $this->data['success'] =sprintf($this->language->get('success_set'), $category_path); } if (isset($this->error['warning'])) { $this->data['error_warning'] = $this->error['warning']; } else { $this->data['error_warning'] = ''; } $this->data['category'] = array(); $category_values = $this->config->get('VALORES_'.$category_id,$store_id); $results = $this->model_module_supercategorymenuadvanced->getCategoryOptions($category_id,$store_id); $options_data= array(); foreach ($results as $result) { if (is_array($category_values) && isset($category_values['options'][$result['option_id']]['option_id'])){ $option_checked=true; $option_seperator=isset($category_values['options'][$result['option_id']]['separator'])? $category_values['options'][$result['option_id']]['separator'] : "no"; $option_order=isset($category_values['options'][$result['option_id']]['sort_order'])? $category_values['options'][$result['option_id']]['sort_order'] : 0; $option_orderval=isset($category_values['options'][$result['option_id']]['orderval'])? $category_values['options'][$result['option_id']]['orderval'] : "OH"; $option_number=isset($category_values['options'][$result['option_id']]['number'])? $category_values['options'][$result['option_id']]['number'] : 8; $option_view=isset($category_values['options'][$result['option_id']]['view'])? $category_values['options'][$result['option_id']]['view'] :"list" ; $option_initval=isset($category_values['options'][$result['option_id']]['initval'])? $category_values['options'][$result['option_id']]['initval'] :"opened" ; $option_searchinput=isset($category_values['options'][$result['option_id']]['searchinput'])? $category_values['options'][$result['option_id']]['searchinput'] :"no" ; }else{ $option_checked=false; $option_seperator="no"; $option_order=0; $option_orderval="OH"; $option_number="8"; $option_view="list"; $option_initval="opened"; $option_searchinput="no"; } $options_values=array(); $options_values = $this->model_module_supercategorymenuadvanced->getOptionsValues($result['option_id'],$category_id,$store_id); $options_data[] = array( 'option_id' => $result['option_id'], 'name' => $result['name'], 'checked' => $option_checked, 'separator' => $option_seperator, 'values' => $options_values, 'sort_order' => $option_order, 'number' => $option_number, 'orderval' => $option_orderval, 'view' => $option_view, 'initval' => $option_initval, 'searchinput' => $option_searchinput, 'what' => 'options' ); } $results = $this->model_module_supercategorymenuadvanced->getCategoryAttributes($category_id,$store_id); $attribute_data = array(); foreach ($results as $result) { if (is_array($category_values) && isset($category_values['attributes'][$result['attribute_id']]['attribute_id'])){ $attribute_checked=true; $attribute_seperator=isset($category_values['attributes'][$result['attribute_id']]['separator'])? $category_values['attributes'][$result['attribute_id']]['separator'] : "no"; $attribute_order=isset($category_values['attributes'][$result['attribute_id']]['sort_order'])? $category_values['attributes'][$result['attribute_id']]['sort_order'] : 0; $attribute_orderval=isset($category_values['attributes'][$result['attribute_id']]['orderval'])? $category_values['attributes'][$result['attribute_id']]['orderval'] : "OH"; $attribute_number=isset($category_values['attributes'][$result['attribute_id']]['number'])? $category_values['attributes'][$result['attribute_id']]['number'] : 8; $attribute_view=isset($category_values['attributes'][$result['attribute_id']]['view'])? $category_values['attributes'][$result['attribute_id']]['view'] :"list" ; $attribute_initval=isset($category_values['attributes'][$result['attribute_id']]['initval'])? $category_values['attributes'][$result['attribute_id']]['initval'] :"opened" ; $attribute_searchinput=isset($category_values['attributes'][$result['attribute_id']]['searchinput'])? $category_values['attributes'][$result['attribute_id']]['searchinput'] :"no" ; }else{ $attribute_checked=false; $attribute_seperator="no"; $attribute_order=0; $attribute_orderval="OH"; $attribute_number="8"; $attribute_view="list"; $attribute_initval="opened"; $attribute_searchinput="no"; } $attribute_values=array(); $attribute_values = $this->model_module_supercategorymenuadvanced->getAttributeValues($result['attribute_id'],$category_id,$store_id); $attribute_data[] = array( 'attribute_id' => $result['attribute_id'], 'name' => $result['name'], 'checked' => $attribute_checked, 'separator' => $attribute_seperator, 'values' => $attribute_values, 'sort_order' => $attribute_order, 'number' => $attribute_number, 'orderval' => $attribute_orderval, 'view' => $attribute_view, 'initval' => $attribute_initval, 'searchinput' => $attribute_searchinput, 'what' => 'attributes' ); } $all_values=array(); $all_values=array_merge($options_data,$attribute_data); $sort_order=array(); foreach ($all_values as $key => $value) { $sort_order[] = $value['sort_order']; } array_multisort($sort_order, SORT_ASC,$all_values); $this->data['category'] = array( 'category_id' => $category_id, 'all_values' => $all_values, 'attributes' => $attribute_data, 'options' => $options_data, 'parent_id' => $this->model_module_supercategorymenuadvanced->getCategoryParent_id($category_id,$store_id), 'store_id' => $store_id ); $this->load->model('localisation/language'); $this->data['languages'] = $this->model_localisation_language->getLanguages(); $this->template = 'module/supercategorymenu/supercategorymenuadvanced_values.tpl'; $this->response->setOutput($this->render()); } private function validate() { if (!$this->user->hasPermission('modify', 'module/supercategorymenuadvanced')) { $this->error['warning'] = $this->language->get('error_permission'); } if (!$this->error) { return true; } else { return false; } } public function DeleteCacheSettings() { $this->load->model('module/supercategorymenuadvanced'); $category_id="Error"; $are_you_sure=0; $this->data['error_warning']=0; $this->data['successdel']=false; $this->data['button_delete'] = $this->language->get('button_delete'); $this->data['button_cancel'] = $this->language->get('button_cancel'); if (isset($this->request->get['Are_you_sure'])) { $are_you_sure = $this->request->get['Are_you_sure']; } else { $are_you_sure = 0; } $this->load->language('module/supercategorymenuadvanced'); if ($are_you_sure){ foreach ($this->request->get['selected_del'] as $cache_id) { $this->model_module_supercategorymenuadvanced->DeleteCacheRecord($cache_id); } $this->data['successdel']=$this->language->get('success_del_cache'); $this->data['text_error_no_cache']= false; $this->data['cache_records']=$this->model_module_supercategorymenuadvanced->GetCacheRecords('admin','cs.name'); if (empty($this->data['cache_records'])){ $this->data['text_error_no_cache'] = $this->language->get('text_error_no_cache'); } } $this->template = 'module/supercategorymenu/supercategorymenuadvanced_delete_cache_admin.tpl'; $this->response->setOutput($this->render()); } public function DeleteCache() { $this->load->model('module/supercategorymenuadvanced'); $category_id="Error"; $are_you_sure=0; $this->data['error_warning'] =0; $this->data['successdel'] =0; $this->data['button_delete'] = $this->language->get('button_delete'); $this->data['button_cancel'] = $this->language->get('button_cancel'); if (isset($this->request->get['category_id'])) { $category_id = $this->request->get['category_id']; } else { $category_id = "Error"; } if (isset($this->request->get['store_id'])) { $store_id = $this->request->get['store_id']; } else { $store_id = "Error"; } if (isset($this->request->get['Are_you_sure'])) { $are_you_sure = $this->request->get['Are_you_sure']; } else { $are_you_sure = 0; } if ($category_id=="Error" || $store_id =="Error"){ $this->data['error_warning']=$this->language->get('text_error_category'); }else{ $this->load->language('module/supercategorymenuadvanced'); if ($are_you_sure){ foreach ($this->request->post['selected'] as $cache_id) { $this->model_module_supercategorymenuadvanced->DeleteCacheRecord($cache_id); } $this->data['successdel']=$this->language->get('success_del_cache'); $this->data['text_error_no_cache']= false; $this->data['cache_records']=$this->model_module_supercategorymenuadvanced->GetCacheRecords($category_id,'cs.cached'); $this->data['entry_cache_del_list'] = sprintf($this->language->get('entry_cache_del_list'),$this->model_module_supercategorymenuadvanced->getPath($category_id)); $this->data['text_cache_del_remenber'] = $this->language->get('text_cache_del_remenber'); if (empty($this->data['cache_records'])){ $this->data['text_error_no_cache'] = $this->language->get('text_error_no_cache'); } }else{ $this->data['text_cache_del_remenber'] = $this->language->get('text_cache_del_remenber'); $this->data['text_error_no_cache'] = false; $this->data['entry_cache_del_list'] = sprintf($this->language->get('entry_cache_del_list'),$this->model_module_supercategorymenuadvanced->getPath($category_id)); $this->data['cache_records']=$this->model_module_supercategorymenuadvanced->GetCacheRecords($category_id,'cs.cached'); if (empty($this->data['cache_records'])){ $this->data['text_error_no_cache']=$this->language->get('text_error_no_cache'); } } $this->data['action_del_cache'] = $this->url->link('module/supercategorymenuadvanced/DeleteCache', 'token=' . $this->session->data['token'] .'&category_id='.$category_id.'&Are_you_sure=1&store_id='.$store_id, 'SSL'); } $this->template = 'module/supercategorymenu/supercategorymenuadvanced_delete_cache.tpl'; $this->response->setOutput($this->render()); } public function style() { $style = basename($this->request->get['style']); if (file_exists(DIR_CATALOG . 'view/javascript/jquery/supermenu/templates/'. $style . '/'. $style . '.png')) { $image = HTTP_CATALOG. 'catalog/view/javascript/jquery/supermenu/templates/'. $style . '/'. $style . '.png'; } else { $image = HTTPS_IMAGE . 'no_image.jpg'; } $this->response->setOutput('<img src="' . $image . '" alt="" title="" style="border: 1px solid #EEEEEE;" />'); } public function DeleteCacheDB() { $json = array(); if($this->db->query("TRUNCATE " . DB_PREFIX . "cache_supercategory")){ $json['success']="Database truncated"; $json['registros']=0; }else{ $json['error']="Error, we could not truncate database, try again!"; } $this->response->setOutput(json_encode($json)); } } ?>